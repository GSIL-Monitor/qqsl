<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

	<!-- spring mvc 支持web应用程序的文件上传功能，是由spring内置的即插即用的MultipartResolver来实现的 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 256M -->
		<property name="maxUploadSize" value="256000000"></property>
	</bean>

	<!-- 如果在springmvc配置文件，如果使用默认加载，则service、dao层的bean可能也重新加载了，但事务的AOP代理没有配置在springmvc配置文件中， 
		从而造成新加载的bean覆盖了老的bean，造成事务失效。只要使用use-default-filters=“false”禁用掉默认的行为就可以了 -->
	<!-- <context:component-scan base-package="com.hysw.qqsl.cloud"-->
	<context:component-scan base-package="com"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- <mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。 
		<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 
		两个bean, 是spring MVC为@Controllers分发请求所必须的 -->
	<mvc:annotation-driven />

	<!-- 如果将DispatcherServlet请求映射配置为"/"，则Spring MVC将捕获Web容器所有的请求，包括静态资源的请求， 
		Spring MVC会将它们当成一个普通请求处理，因此找不到对应处理器将导致错误。配置<mvc:resources />后， 由Spring MVC框架自己处理静态资源，并添加一些有用的附加值功能。cache-period 
		为缓存时间 一半设为1年31536000， 开发时建议设小点(10)以防止缓存带来的麻烦 -->
	<mvc:resources location="/resources/" mapping="/resources/**"
		cache-period="10" />
	<!-- 开启shiro注解支持 -->
	 <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"/>
</beans>